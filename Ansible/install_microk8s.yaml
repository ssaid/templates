---
- name: Install Snap and MicroK8s
  hosts: pegasus
  become: true
  tasks:
    - name: Install Snap package manager
      apt:
        name: snapd
        state: present

    - name: Ensure Snap bin directory is in the system PATH
      lineinfile:
        path: /etc/environment
        line: 'PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"'
      notify:
        - Update PATH

    - name: Reload environment to apply PATH changes
      shell: source /etc/environment
      args:
        executable: /bin/bash
      when: ansible_os_family == 'Debian'
      notify:
        - Update PATH

    - name: Install MicroK8s via Snap
      snap:
        name: microk8s
        classic: yes
        state: present
      tags:
        - microk8s
    
    - name: Set up kubectl aliases for MicroK8s
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "alias kubectl='microk8s kubectl'"
        create: yes
        insertafter: EOF
      notify:
        - Reload Bashrc

    - name: Fetch MicroK8s configuration
      fetch:
        src: /var/snap/microk8s/current/credentials/client.config
        dest: /tmp/microk8s.config
        flat: yes

  handlers:
    - name: Update PATH
      shell: source /etc/environment
      args:
        executable: /bin/bash
      changed_when: false
    - name: Reload Bashrc
      shell: "source {{ ansible_env.HOME }}/.bashrc"
      args:
        executable: /bin/bash
      changed_when: false

- name: Set KUBECONFIG environment variable on local machine
  hosts: localhost
  connection: local
  tasks:
    - name: Append MicroK8s configuration to local kubectl config
      local_action: copy content="{{ lookup('file', '/tmp/microk8s.config') }}" dest="{{ lookup('env', 'HOME') }}/.kube/microk8s.config"

    - name: Set KUBECONFIG environment variable
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        line: 'export KUBECONFIG="{{ ansible_env.HOME }}/.kube/config:{{ ansible_env.HOME }}/.kube/microk8s.config"'
        create: yes
        insertafter: EOF

    - name: Reload Zsh configuration
      shell: source "{{ ansible_env.HOME }}/.zshrc"
      args:
        executable: /bin/zsh
      when: ansible_env.SHELL == '/bin/zsh'
      changed_when: false
